===========================
How to use 0-add_integer.py
===========================

This module defines a function ``add_integer(a, b=98)``.

Usage
=====

``add_integer(...)`` returns the addition of 2 arguments. In
maths this is equivalent to using ``+`` operator.

::

	>>> add_integer = __import__('0-add_integer').add_integer
	>>> add_integer(1, 2)
	3

::

	>>> add_integer(-1, 2)
        1

::

	>>> add_integer(-1, -1)
        -2

::

The function also works with float data type

	>>> add_integer(2.2, 3)
        5

The float will be casted to an integer before performing the operation

::

	>>> add_integer(1.9, 2.1)
        3

::

The second argument is optional.
By default it is 98

	>>> add_integer(1)
        99

::

Non-numbers
===========

``add_integer(...)`` only works when both arguments passed to it
are either floats or integers. If not, it will raise a TypeError

::

	>>> add_integer(1, 'a')
        Traceback (most recent last call):
	...
	TypeError: b must be an integer

::

Since None is not an integer, it will also raise a TypeError:

        >>> add_integer(None)
        Traceback (most recent last call):
        ...
        TypeError: a must be an integer

::

        >>> add_integer(1, None)
        Traceback (most recent last call):
        ...
        TypeError: b must be an integer

::

The function fails if infinity is passed as an argument.
An OverflowError will be raised:

        >>> add_integer(float('inf'))
        Traceback (most recent last call):
        ...
        OverflowError: cannot convert float infinity to integer

::

'Nan' numbers will raise a ValueError:

        >>> add_integer(float('nan'))
        Traceback (most recent last call):
        ...
        ValeError: cannot convert float Nan to integer
